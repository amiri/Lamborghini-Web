.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Manual::Tutorial::01_Intro 3"
.TH Catalyst::Manual::Tutorial::01_Intro 3 "2010-02-17" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Manual::Tutorial::01_Intro \- Catalyst Tutorial \- Chapter 1: Introduction
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This is \fBChapter 1 of 10\fR for the Catalyst tutorial.
.PP
Tutorial Overview
.IP "1." 4
\&\fB01_Introduction\fR
.IP "2." 4
Catalyst Basics
.IP "3." 4
More Catalyst Basics
.IP "4." 4
Basic \s-1CRUD\s0
.IP "5." 4
Authentication
.IP "6." 4
Authorization
.IP "7." 4
Debugging
.IP "8." 4
Testing
.IP "9." 4
Advanced \s-1CRUD\s0
.IP "10." 4
Appendices
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This tutorial provides a multi-part introduction to the Catalyst web
framework. It seeks to provide a rapid overview of many of its most
commonly used features. The focus is on the real-world best practices
required in the construction of nearly all Catalyst applications.
.PP
Although the primary target of the tutorial is users new to the Catalyst
framework, experienced users may wish to review specific sections (for
example, how to use \s-1DBIC\s0 for their model classes, how to add
authentication and authorization to an existing application, or form
management).
.PP
You can obtain the code for all the tutorial examples from the
catalyst subversion repository by issuing the command:
.PP
.Vb 1
\&    svn co http://dev.catalyst.perl.org/repos/Catalyst/trunk/examples/Tutorial/ CatalystTutorial
.Ve
.PP
This will download the most recent code for each chapter of the
tutorial into the CatalystTutorial directory on your machine.
.PP
\&\fBThese reference implementations are provided so that when you follow
the tutorial, you can use the code from the subversion repository to
ensure that your system is set up correctly, and that you have not
inadvertently made any typographic errors, or accidentally skipped
part of the tutorial.\fR
.PP
\&\fB\s-1NOTE:\s0 You can use any Perl-supported \s-1OS\s0 and environment to run 
Catalyst.\fR It should make little or no difference to Catalyst's 
operation, \fBbut this tutorial has been written using the Debian 5 
live \s-1CD\s0\fR because that represents a quick and easy way for most people to 
try out Catalyst with virtually zero setup time and hassles.  Also, 
the tutorial has been tested to work correctly with the versions of 
Catalyst and all the supporting modules in Debian 5 (see \*(L"\s-1VERSIONS\s0 
\&\s-1AND\s0 \s-1CONVENTIONS\s0 \s-1USED\s0 \s-1IN\s0 \s-1THIS\s0 \s-1TUTORIAL\s0\*(R" below for the specific versions 
for some of the key modules), so \fBif you think you might be running 
into an issue related to versions\fR (for example, a module changed its 
behavior in a newer version or a bug was introduced), \fBit might be 
worth giving Debian 5 a try\fR.
.PP
If you plan to follow along with Debian 5, you can jump down to the 
\&\*(L"Debian\*(R" section under \*(L"\s-1CATALYST\s0 \s-1INSTALLATION\s0\*(R" below and it will walk you 
though the setup of a fully functional Catalyst environment. If you 
would prefer to install directly from \s-1CPAN\s0, you can download the example 
program and all the necessary dependencies to your local machine by 
installing the \f(CW\*(C`Task::Catalyst::Tutorial\*(C'\fR distribution:
.PP
.Vb 1
\&     cpan Task::Catalyst::Tutorial
.Ve
.PP
This will also test to make sure the dependencies are working.  If you
have trouble installing these, please ask for help on the #catalyst
\&\s-1IRC\s0 channel, or the Catalyst mailing list.
.PP
Subjects covered by the tutorial include:
.IP "\(bu" 4
A simple application that lists and adds books.
.IP "\(bu" 4
The use of DBIx::Class (\s-1DBIC\s0) for the model (including 
some of the more advanced techniques you will probably want to use in 
your applications).
.IP "\(bu" 4
How to write \s-1CRUD\s0 (Create, Read, Update, and Delete) operations in
Catalyst.
.IP "\(bu" 4
Authentication (\*(L"auth\*(R").
.IP "\(bu" 4
Role-based authorization (\*(L"authz\*(R").
.IP "\(bu" 4
Attempts to provide an example showing current (5.8XXX) Catalyst
practices. For example, the use of 
Catalyst::Action::RenderView,
\&\s-1DBIC\s0, Catalyst::Plugin::ConfigLoader 
with \f(CW\*(C`myapp.conf\*(C'\fR, the use of \f(CW\*(C`lib/MyApp/Controller/Root.pm\*(C'\fR 
vs. \f(CW\*(C`lib/MyApp.pm\*(C'\fR, etc.
.IP "\(bu" 4
The use of Template Toolkit (\s-1TT\s0).
.IP "\(bu" 4
Useful techniques for troubleshooting and debugging Catalyst
applications.
.IP "\(bu" 4
The use of SQLite as a database (with code also provided for MySQL and
PostgreSQL).  (Note: Because we make use of the DBIx::Class Object 
Relational Mapping [\s-1ORM\s0] layer, out our application will be database
agnostic and can easily be used by any of the databases supported
by DBIx::Class.)
.IP "\(bu" 4
The use of HTML::FormFu or HTML::FormHandler
for automated form processing and validation.
.PP
This tutorial makes the learning process its main priority.  For
example, the level of comments in the code found here would likely be
considered excessive in a \*(L"normal project.\*(R"  Because of their contextual
value, this tutorial will generally favor inline comments over a
separate discussion in the text.  It also deliberately tries to
demonstrate multiple approaches to various features (in general, you
should try to be as consistent as possible with your own production
code).
.PP
Furthermore, this tutorial tries to minimize the number of controllers,
models, \s-1TT\s0 templates, and database tables.  Although this does result in
things being a bit contrived at times, the concepts should be applicable
to more complex environments.  More complete and complicated example
applications can be found in the \f(CW\*(C`examples\*(C'\fR area of the Catalyst
Subversion repository at
<http://dev.catalyst.perl.org/repos/Catalyst/trunk/examples/>.
.SH "QUICK START"
.IX Header "QUICK START"
For those who want to get going quickly, here is a short \*(L"cookbook-style 
recipe\*(R" to quickly get you up and running. Although there are many 
different ways to get a Catalyst environment going, this tutorial has 
been written with and tested against Debian 5 Live \s-1CD\s0, using the steps 
in this Quick Start.
.PP
If you want, you can follow the directions in this section and then jump 
right to Chapter 2 of 
the tutorial. However, it would be a good idea to come back and read the 
sections below the Quick Start when you have time. Or, continue reading 
those other sections for suggestions if you do not wish to use the 
Debian 5 Live \s-1CD\s0.
.IP "1." 4
Download the \f(CW\*(C`debian\-live\-503\-i386\-rescue.iso\*(C'\fR image from
http://cdimage.debian.org/cdimage/release/current\-live/i386/iso\-cd/ <http://cdimage.debian.org/cdimage/release/current-live/i386/iso-cd/>.
.IP "2." 4
Boot this disk, either in a physical machine, or possibly some sort
of virtual machine (can be a very handy way to practice).
.IP "3." 4
Select "\f(CW\*(C`Live\*(C'\fR" from the initial boot menu.
.IP "4." 4
At the "\f(CW\*(C`user@debian:~$\*(C'\fR" prompt, type:
.Sp
.Vb 1
\&    sudo aptitude \-y install subversion
.Ve
.IP "5." 4
If you want to be able to remotely \s-1SSH\s0 to this system, set a
password for root:
.Sp
.Vb 2
\&    sudo passwd
\&    ...
.Ve
.IP "6." 4
Add the \*(L"unstable\*(R" Debian package repository:
.Sp
.Vb 1
\&    sudo vi /etc/apt/sources.list
.Ve
.Sp
Add the following line to the bottom of this file:
.Sp
.Vb 1
\&    deb http://ftp.us.debian.org/debian/ unstable main
.Ve
.IP "7." 4
Install Catalyst and related libraries:
.Sp
.Vb 8
\&    sudo aptitude update
\&    sudo aptitude \-y install sqlite3 libdbd\-sqlite3\-perl libcatalyst\-perl \e
\&        libcatalyst\-modules\-perl libdbix\-class\-timestamp\-perl \e
\&        libdatetime\-format\-sqlite\-perl libconfig\-general\-perl \e
\&        libhtml\-formfu\-model\-dbic\-perl libterm\-readline\-perl\-perl \e
\&        libdbix\-class\-encodedcolumn\-perl libperl6\-junction\-perl \e
\&        libtest\-pod\-perl
\&    sudo aptitude clean
.Ve
.IP "8." 4
Test example code:
.Sp
.Vb 6
\&    mkdir test
\&    cd test
\&    svn co http://dev.catalystframework.org/repos/Catalyst/trunk/examples/Tutorial/MyApp_Chapter8
\&    cd MyApp_Chapter8/MyApp
\&    CATALYST_DEBUG=0 prove \-wl t
\&    cd
.Ve
.SH "VERSIONS AND CONVENTIONS USED IN THIS TUTORIAL"
.IX Header "VERSIONS AND CONVENTIONS USED IN THIS TUTORIAL"
This tutorial was built using the following resources. Please note that
you may need to make adjustments for different environments and
versions (note that trailing zeros in version numbers are not 
significant and may get dropped with techniques for viewing them;
for example, Catalyst v5.80020 might show up as 5.8002):
.IP "\(bu" 4
Debian 5 (Lenny)
.IP "\(bu" 4
Catalyst v5.80020 (note: may show up as '5.8002' without the trailing zero)
.IP "\(bu" 4
Catalyst::Devel v1.26
.IP "\(bu" 4
DBIx::Class v0.08115
.IP "\(bu" 4
Catalyst::Model::DBIC::Schema v0.40
.IP "\(bu" 4
Template Toolkit v2.20
.IP "\(bu" 4
Catalyst Plugins
.Sp
The plugins used in this tutorial all have sufficiently stable APIs that
you shouldn't need to worry about versions. However, there could be
cases where the tutorial is affected by what version of plugins you
use. This tutorial has been tested against the following set of plugins:
.RS 4
.IP "\(bu" 4
Catalyst::Plugin::Authentication \*(-- v0.10016
.IP "\(bu" 4
Catalyst::Plugin::Authorization::Roles \*(-- v0.08
.IP "\(bu" 4
Catalyst::Plugin::ConfigLoader \*(-- v0.27
.IP "\(bu" 4
Catalyst::Plugin::Session \*(-- v0.29
.IP "\(bu" 4
Catalyst::Plugin::Session::State::Cookie \*(-- v0.17
.IP "\(bu" 4
Catalyst::Plugin::Session::Store::FastMmap \*(-- v0.13
.IP "\(bu" 4
Catalyst::Plugin::StackTrace \*(-- v0.11
.IP "\(bu" 4
Catalyst::Plugin::Static::Simple \*(-- v0.29
.RE
.RS 4
.RE
.IP "\(bu" 4
HTML::FormFu \*(-- v0.06001
.IP "\(bu" 4
\&\fB\s-1NOTE:\s0\fR You can check the versions you have installed with the
following command:
.Sp
.Vb 1
\&    perl \-M<_mod_name_> \-e \*(Aq"print $<_mod_name_>::VERSION\en"\*(Aq
.Ve
.Sp
For example:
.Sp
.Vb 1
\&    perl \-MCatalyst \-e \*(Aqprint "$Catalyst::VERSION\en";\*(Aq
.Ve
.Sp
or:
.Sp
.Vb 1
\&    perl \-MCatalyst::Devel \-e \*(Aqprint "$Catalyst::Devel::VERSION\en";\*(Aq
.Ve
.IP "\(bu" 4
This tutorial will assume that the web browser is located on the same 
system where the Catalyst development server is running, and 
therefore use a \s-1URL\s0 of \f(CW\*(C`http://localhost:3000\*(C'\fR (the Catalyst 
development server defaults to port 3000).  If you are running Perl on 
a different box than where your web browser is located (or using a 
different port number via the \f(CW\*(C`\-p\*(C'\fR \fIport_number\fR option to the 
development server), then you will need to update the \s-1URL\s0 you use 
accordingly.
.Sp
Please Note: Depending on the web browser you are using, you might 
need to hit \f(CW\*(C`Shift+Reload\*(C'\fR or \f(CW\*(C`Ctrl+Reload\*(C'\fR to pull a fresh page 
when testing your application at various points (see 
<http://en.wikipedia.org/wiki/Bypass_your_cache> for a comprehensive 
list of options for each browser).  Also, the \f(CW\*(C`\-k\*(C'\fR keepalive option 
to the development server can be necessary with some browsers 
(especially Internet Explorer).
.SH "CATALYST INSTALLATION"
.IX Header "CATALYST INSTALLATION"
Although Catalyst installation has been a challenge in the past, the 
good news is that there are a growing number of options to eliminate 
(or at least dramatically simplify) this concern.  Although a 
compelling strength of Catalyst is that it makes use of many of the 
modules in the vast repository that is \s-1CPAN\s0, this can complicate the 
installation process if you approach it in the wrong way.  Consider 
the following suggestions on the most common ways to get started with 
a Catalyst development environment:
.IP "\(bu" 4
Debian
.Sp
The Debian 5 live \s-1CD\s0 represents a great way for newcomers to 
experiment with Catalyst.  As a \*(L"live \s-1CD\s0,\*(R" you can simple boot from 
the \s-1CD\s0, run a few commands, and in a matter of minutes you should have 
a fully function environment in which do this tutorial. \fBThe tutorial 
was fully tested to work under Debian 5.  Although it \s-1SHOULD\s0 work 
under any Catalyst installation method you might choose, it can be 
hard to guarantee this.\fR
.RS 4
.IP "\(bu" 4
Download one of the \s-1ISO\s0 files from 
http://cdimage.debian.org/cdimage/release/current\-live/i386/iso\-cd/ <http://cdimage.debian.org/cdimage/release/current-live/i386/iso-cd/>
(the current version at the time this was written was 5.0.3). 
You can pick any one of the live \s-1CD\s0 variations will work, but 
you may wish to consider the following points:
.RS 4
.IP "\(bu" 4
"\f(CW\*(C`debian\-live\-503\-i386\-rescue.iso\*(C'\fR" is probably the best all-around 
option for most people because it includes many extra tools such as 
the \s-1GCC\s0 compiler, therefore saving \s-1RAM\s0 (every package you need to 
install when running from live \s-1CD\s0 consumes memory because \s-1RAM\s0 disk is 
being used in lieu of real disk space).  When initially booting under 
this image, you may see some cryptic warning messages having to do 
with various diagnostic tools it tries to load or enable, but you 
should be able to safely ignore these.
.IP "\(bu" 4
"\f(CW\*(C`debian\-live\-503\-i386\-standard.iso\*(C'\fR\*(L" is a great option because of 
its compact size, but you will probably need approximately 1 \s-1GB\s0 of \s-1RAM\s0 
in the computer where you will run the tutorial.  Because the 
\&\*(R"standard" live \s-1CD\s0 comes with with a minimal set of tools, we will 
have to install extra packages (such as the \s-1GCC\s0 compiler), all of 
which will require \s-1RAM\s0 when running from a live \s-1CD\s0.
.IP "\(bu" 4
The other \s-1ISO\s0 images include different flavors of X\-Windows desktop 
managers.  You can select one of these if you don't mind the larger 
download size and prefer a graphical environment.  Be aware that these 
disks do not come with the extra tools found on the \*(L"rescue\*(R" image, so 
you will need adequate \s-1RAM\s0 to be able to install them just as you 
would under the \*(L"standard\*(R" image. \fBUse one of the \*(L"graphical\*(R" \s-1ISO\s0 
images if you want a graphical web browser on the same machine as 
where you will run the tutorial.\fR  (If you are using one of the non\-
graphical images discussed above, you can still use a graphical web 
browser from another machine and point it to your Catalyst development 
machine.)
.RE
.RS 4
.RE
.IP "\(bu" 4
Boot off the \s-1CD\s0.
.IP "\(bu" 4
Select "\f(CW\*(C`Live\*(C'\fR" from the initial boot menu.
.IP "\(bu" 4
Once the system has booted to a "\f(CW\*(C`user@debian:~$\*(C'\fR" prompt, first
install the Subversion client in case you want to check out the
completed chapter example code:
.Sp
.Vb 1
\&    sudo aptitude \-y install subversion
.Ve
.Sp
If you want to be able to remotely \s-1SSH\s0 to this system, set a
password for root:
.Sp
.Vb 2
\&    sudo passwd
\&    ...
.Ve
.Sp
Then enter the following command to add the more current \*(L"unstable\*(R" 
package repository so we get the latest versions of Catalyst and
related packages:
.Sp
.Vb 1
\&    sudo vi /etc/apt/sources.list
.Ve
.Sp
Add the following line to the bottom of this file:
.Sp
.Vb 1
\&    deb http://ftp.us.debian.org/debian/ unstable main
.Ve
.Sp
If you are not familiar with \s-1VI\s0, you can move to the bottom of this 
file and press the \*(L"o\*(R" key to insert a new line and type the line 
above.  Then press the \*(L"Esc\*(R" key followed by a colon (\*(L":\*(R"), the 
letters \*(L"wq\*(R" and then the \*(L"Enter\*(R" key.  The rest of the tutorial will 
assume that you know how to use some editor that is available from the 
Linux command-line environment.
.IP "\(bu" 4
Install Catalyst:
.Sp
.Vb 7
\&    sudo aptitude update
\&    sudo aptitude \-y install sqlite3 libdbd\-sqlite3\-perl libcatalyst\-perl \e
\&        libcatalyst\-modules\-perl libdbix\-class\-timestamp\-perl \e
\&        libdatetime\-format\-sqlite\-perl libconfig\-general\-perl \e
\&        libhtml\-formfu\-model\-dbic\-perl libterm\-readline\-perl\-perl \e
\&        libdbix\-class\-encodedcolumn\-perl libperl6\-junction\-perl \e
\&        libtest\-pod\-perl
.Ve
.Sp
Let it install (normally about a 30 to 90\-second operaton) and you are 
done. (Note the '\e' above.  Depending on your environment, you might 
be able to cut and paste the text as shown or need to remove the '\e' 
characters to that the command is all on a single line.)
.Sp
If you are using an image other than the \*(L"rescue\*(R" \s-1ISO\s0, you will also need
to run the following command to install additional packages:
.Sp
.Vb 1
\&    sudo aptitude \-y install gcc make libc6\-dev
.Ve
.Sp
If you are running from the Live \s-1CD\s0, you probably also want to free up 
some \s-1RAM\s0 disk space with the following:
.Sp
.Vb 1
\&    sudo aptitude clean
.Ve
.Sp
\&\s-1NOTE:\s0 While the instructions above mention the Live \s-1CD\s0 because that 
makes it easy for people new to Linux, you can obviously pick a 
different Debian \s-1ISO\s0 image and install it to your hard drive. 
Although there are many different ways to download and install Debian, 
the \*(L"netinst\*(R" \s-1ISO\s0 image (such as "\f(CW\*(C`debian\-500\-i386\-netinst.iso\*(C'\fR\*(L" 
represents a great option because it keeps your initial download small 
(but still let's you install anything you want \*(R"over the network").
.Sp
Here are some tips if you are running from a live \s-1CD\s0 and are running
out of disk space (which really means you are running out of \s-1RAM\s0):
.RS 4
.IP "\(bu" 4
Always run "\f(CW\*(C`aptitude clean\*(C'\fR" after you install new packages to 
delete the original .deb files (the files installed \fBby\fR the .deb 
package \fBwill\fR remain available, just the .deb package itself is 
deleted).
.IP "\(bu" 4
If you are installing modules from \s-1CPAN\s0, you can free up some space 
with "\f(CW\*(C`rm \-rf /root/.cpan/*\*(C'\fR\*(L" (change \*(R"/root/" in the previous 
command to match your home directory or the location where \s-1CPAN\s0
has been configured to perform build operations).
.IP "\(bu" 4
If necessary, you can remove the cached package information with the 
command "\f(CW\*(C`rm \-f /var/lib/apt/lists/*\*(C'\fR\*(L".  You can later pull this 
information again via the command \*(R"\f(CW\*(C`aptitude update\*(C'\fR".
.IP "\(bu" 4
You can save a small amount of space by commenting out the lines in 
\&\f(CW\*(C`/etc/apt/sources.list\*(C'\fR that reference \*(L"deb-src\*(R" and 
\&\*(L"security.debian.org\*(R".  If you have already done an "\f(CW\*(C`aptitude 
update\*(C'\fR\*(L" with these repositories enabled, you can use the tip in the 
previous bullet to free the space up (and then do another \*(R"\f(CW\*(C`aptitude 
update\*(C'\fR").
.IP "\(bu" 4
Although you can free up space by removing packages you installed 
since you last booted (check out "\f(CW\*(C`aptitude remove _pkg_name\*(C'\fR"), 
don't bother trying to remove packages already available at the time 
of boot. Instead of freeing up space, it will actual \fIconsume\fR some 
space. (The live \s-1CD\s0 uses these \*(L"burn in\*(R" packages right from the \s-1CD\s0 
disk vs. first loading them on the virtual \s-1RAM\s0 disk. However, if you 
remove them, the system has to update various files, something that 
\&\fIdoes\fR consume some space on the virtual \s-1RAM\s0 disk.)
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.IP "\(bu" 4
Ubuntu
.Sp
Ubuntu is an extremely popular offshoot of Debian.  It provides 
cutting edge versions of many common tools, application and libraries 
in an easy-to-run live \s-1CD\s0 configuration (and because a single download 
option can be used for both live \s-1CD\s0 and install-to-disk usage, it 
keeps your download options nice and simple).  As with Debian 5, you 
should be able to generate a fully function Catalyst environment in a 
matter of minutes.  Here are quick instructions on how to use Ubuntu 
to prepare for the tutorial:
.RS 4
.IP "\(bu" 4
Download the Ubuntu Desktop edition and boot from the \s-1CD\s0 and/or image 
file, select your language, and then \*(L"Try Ubuntu without any changes 
to your computer.\*(R"
.IP "\(bu" 4
Open a terminal session (click \*(L"Applications\*(R" in the upper-left 
corner, then \*(L"Accessories,\*(R" then \*(L"Terminal\*(R").
.IP "\(bu" 4
Add the 'universe' repositories:
.Sp
.Vb 1
\&    sudo gedit /etc/apt/sources.list
.Ve
.Sp
And remove the comments from the lines under the comments about the
\&'universe' repositories.
.IP "\(bu" 4
Install Catalyst:
.Sp
.Vb 2
\&    sudo aptitude update
\&    sudo aptitude install libdbd\-sqlite3\-perl libcatalyst\-perl libcatalyst\-modules\-perl libconfig\-general\-perl
.Ve
.Sp
Accept all of the dependencies.  Done.
.Sp
If you are running from the Live \s-1CD\s0, you probably also want to free up 
some disk space with the following:
.Sp
.Vb 1
\&    sudo aptitude clean
.Ve
.Sp
\&\s-1NOTE:\s0 While the instructions above mention the live \s-1CD\s0 because that 
makes it easy for people new to Linux, you can obviously also use one 
of the options to install Ubuntu on your drive.
.RE
.RS 4
.RE
.IP "\(bu" 4
Matt Trout's \f(CW\*(C`cat\-install\*(C'\fR
.Sp
Available at http://www.shadowcat.co.uk/static/cat\-install <http://www.shadowcat.co.uk/static/cat-install>, 
\&\f(CW\*(C`cat\-install\*(C'\fR can be a fairly painless way to get Catalyst up and 
running.  Just download the script from the link above and type \f(CW\*(C`perl 
cat\-install\*(C'\fR.  Depending on the speed of your Internet connection and 
your computer, it will probably take 30 to 60 minutes to install because 
it downloads, makes, compiles, and tests every module.  But this is an 
excellent way to automate the installation of all the latest modules 
used by Catalyst from \s-1CPAN\s0.
.IP "\(bu" 4
Other Possibilities
.RS 4
.IP "\(bu" 4
OpenBSD Packages
.Sp
The 2008 Advent Day 4 entry has more information on using OpenBSD 
packages to quickly build a system: 
<http://www.catalystframework.org/calendar/2008/4>.
.IP "\(bu" 4
NetBSD Package Collection on Solaris
.Sp
The 2008 Advent Day 15 entry has more information on using \f(CW\*(C`pkgsrc\*(C'\fR and 
NetBSD packages on Solaris: 
<http://www.catalystframework.org/calendar/2008/15>.
.IP "\(bu" 4
CatInABox
.Sp
You can get more information at 
<http://www.catalystframework.org/calendar/2008/7>
or Perl::Dist::CatInABox.
.IP "\(bu" 4
Frank Speiser's Amazon \s-1EC2\s0 Catalyst \s-1SDK\s0
.Sp
There are currently two flavors of publicly available Amazon Machine
Images (\s-1AMI\s0) that include all the elements you'd need to begin
developing in a fully functional Catalyst environment within minutes.
See Catalyst::Manual::Installation
for more details.
.RE
.RS 4
.RE
.PP
For additional information and recommendations on Catalyst installation,
please refer to 
Catalyst::Manual::Installation.
.SH "DATABASES"
.IX Header "DATABASES"
This tutorial will primarily focus on SQLite because of its simplicity
of installation and use; however, modifications in the script required
to support MySQL and PostgreSQL will be presented in Appendix.
.PP
\&\fBNote:\fR One of the advantages of the \s-1MVC\s0 design patterns is that
applications become much more database independent.  As such, you will
notice that only the \f(CW\*(C`.sql\*(C'\fR files used to initialize the database
change between database systems: the Catalyst code generally remains the
same.
.SH "WHERE TO GET WORKING CODE"
.IX Header "WHERE TO GET WORKING CODE"
Each chapter of the tutorial has complete code available as a tarball in 
the main Catalyst Subversion repository (see the note at the beginning 
of each part for the appropriate svn command to use).
.PP
\&\fB\s-1NOTE:\s0\fR You can run the test cases for the final code through Chapter 8 
with the following commands:
.PP
.Vb 3
\&    svn co http://dev.catalystframework.org/repos/Catalyst/trunk/examples/Tutorial/MyApp_Chapter8
\&    cd MyApp_Chapter8/MyApp
\&    CATALYST_DEBUG=0 prove \-wl t
.Ve
.PP
If you wish to include the HTML::FormFu section in your tests,
substitute \f(CW\*(C`MyApp_Chapter9_FormFu\*(C'\fR for \f(CW\*(C`MyApp_Chapter8\*(C'\fR in the \s-1URL\s0
above (don't forget to \*(L"cd\*(R" out of the Ch8 directory if you ran the code above).
.PP
.Vb 3
\&    svn co http://dev.catalystframework.org/repos/Catalyst/trunk/examples/Tutorial/MyApp_Chapter9_FormFu
\&    cd MyApp_Chapter9_FormFu/MyApp
\&    CATALYST_DEBUG=0 prove \-wl t
.Ve
.PP
You can also fire up the application under the development server that is conveniently
built in to Catalyst.  Just issue this command from the \f(CW\*(C`MyApp\*(C'\fR directory where you
ran the test suite above:
.PP
.Vb 1
\&    script/myapp_server.pl
.Ve
.PP
And the application will start.  You can try out the application by 
pulling up \f(CW\*(C`http://localhost:3000\*(C'\fR in your web browser (as mentioned 
earlier, change \f(CW\*(C`localhost\*(C'\fR to a different \s-1IP\s0 address or \s-1DNS\s0 name if 
you are running your web browser and your Catalyst development on 
different boxes).  We will obviously see more about how to use the 
application as we go through the remaining chapters of the tutorial, but 
for now you can log in using the username \*(L"test01\*(R" and a password of 
\&\*(L"mypass\*(R".
.SH "AUTHOR"
.IX Header "AUTHOR"
Kennedy Clark, \f(CW\*(C`hkclark@gmail.com\*(C'\fR
.PP
Please report any errors, issues or suggestions to the author.  The
most recent version of the Catalyst Tutorial can be found at
http://dev.catalyst.perl.org/repos/Catalyst/Catalyst\-Manual/5.80/trunk/lib/Catalyst/Manual/Tutorial/ <http://dev.catalyst.perl.org/repos/Catalyst/Catalyst-Manual/5.80/trunk/lib/Catalyst/Manual/Tutorial/>.
.PP
Copyright 2006\-2008, Kennedy Clark, under Creative Commons License
(http://creativecommons.org/licenses/by\-sa/3.0/us/ <http://creativecommons.org/licenses/by-sa/3.0/us/>).
