.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BerkeleyDB::Manager 3"
.TH BerkeleyDB::Manager 3 "2009-01-16" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BerkeleyDB::Manager \- General purpose BerkeleyDB wrapper
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use BerkeleyDB::Manager;
\&
\&        my $m = BerkeleyDB::Manager\->new(
\&                home => Path::Class::Dir\->new( ... ), # if you want to use rel paths
\&                db_class => "BerkeleyDB::Hash", # the default class for new DBs
\&        );
\&
\&        my $db = $m\->open_db( file => "foo" ); # defaults
\&
\&        $m\->txn_do(sub {
\&                $db\->db_put("foo", "bar");
\&                die "error!"; # rolls back
\&        });
\&
\&        # fetch all key/value pairs as a Data::Stream::Bulk
\&        my $pairs = $m\->cursor_stream( db => $db );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object provides a convenience wrapper for BerkeleyDB
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "home" 4
.IX Item "home"
The path to pass as \f(CW\*(C`\-Home\*(C'\fR to \f(CW\*(C`BerkeleyDB::Env\->new\*(C'\fR.
.Sp
If provided the \f(CW\*(C`file\*(C'\fR arguments to \f(CW\*(C`open_db\*(C'\fR should be relative paths.
.Sp
If not provided, BerkeleyDB will use the current working directory for
transaction journals, etc.
.IP "create" 4
.IX Item "create"
Whether \f(CW\*(C`DB_CREATE\*(C'\fR is passed to \f(CW\*(C`Env\*(C'\fR or \f(CW\*(C`instantiate_db\*(C'\fR by default. Defaults to
false.
.Sp
If create and specified and an alternate log, data or tmp dir is set, a
\&\f(CW\*(C`DB_CONFIG\*(C'\fR configuration file with those parameters will be written allowing
standard Berkeley \s-1DB\s0 tools to work with the environment home directory.
.Sp
An existing \f(CW\*(C`DB_CONFIG\*(C'\fR file will not be overwritten, nor will one be written
in the current directory if \f(CW\*(C`home\*(C'\fR is not specified.
.IP "lock" 4
.IX Item "lock"
Whether \f(CW\*(C`DB_INIT_LOCK\*(C'\fR is passed. Defaults to true.
.Sp
Can be set to false if \fB\s-1ALL\s0\fR concurrent instances are readonly.
.IP "deadlock_detection" 4
.IX Item "deadlock_detection"
Whether or not lock detection is set. The default is true.
.IP "lk_detect" 4
.IX Item "lk_detect"
The type of lock detection to use if \f(CW\*(C`deadlock_detection\*(C'\fR is set. Defaults to
\&\f(CW\*(C`DB_LOCK_DEFAULT\*(C'\fR. Additional possible values are \f(CW\*(C`DB_LOCK_MAXLOCKS\*(C'\fR,
\&\f(CW\*(C`DB_LOCK_MINLOCKS\*(C'\fR, \f(CW\*(C`DB_LOCK_MINWRITE\*(C'\fR, \f(CW\*(C`DB_LOCK_OLDEST\*(C'\fR, \f(CW\*(C`DB_LOCK_RANDOM\*(C'\fR,
and \f(CW\*(C`DB_LOCK_YOUNGEST\*(C'\fR. See \f(CW\*(C`set_lk_detect\*(C'\fR in the Berkeley \s-1DB\s0 reference guide.
.IP "readonly" 4
.IX Item "readonly"
Whether \f(CW\*(C`DB_RDONLY\*(C'\fR is passed in the flags. Defaults to false.
.IP "transactions" 4
.IX Item "transactions"
Whether or not to enable transactions.
.Sp
Defaults to true.
.IP "autocommit" 4
.IX Item "autocommit"
Whether or not a top level transaction is automatically created by BerkeleyDB.
Defaults to true.
.Sp
If you turn this off note that all database handles must be opened inside a
transaction, unless transactions are disabled.
.IP "auto_checkpoint" 4
.IX Item "auto_checkpoint"
When true \f(CW\*(C`txn_checkpoint\*(C'\fR will be called with \f(CW\*(C`checkpoint_kbyte\*(C'\fR and
\&\f(CW\*(C`checkpoint_min\*(C'\fR every time a top level transaction is comitted.
.Sp
Defaults to true.
.IP "checkpoint_kbyte" 4
.IX Item "checkpoint_kbyte"
Passed to \f(CW\*(C`txn_checkpoint\*(C'\fR. \f(CW\*(C`txn_checkpoint\*(C'\fR will write a checkpoint if that
many kilobytes of data have been written since the last checkpoint.
.Sp
Defaults to 20 megabytes. If transactions are comitted quickly this value
should avoid checkpoints being made too often.
.IP "checkpoint_min" 4
.IX Item "checkpoint_min"
Passed to \f(CW\*(C`txn_checkpoint\*(C'\fR. \f(CW\*(C`txn_checkpoint\*(C'\fR will write a checkpoint if the
last checkpoint was more than this many minutes ago.
.Sp
Defaults to 1 minute. If transactions are not committed very often this
parameter should balance the large-ish default value for \f(CW\*(C`checkpoint_kbyte\*(C'\fR.
.IP "recover" 4
.IX Item "recover"
If true \f(CW\*(C`DB_REGISTER\*(C'\fR and \f(CW\*(C`DB_RECOVER\*(C'\fR are enabled in the flags to the env.
.Sp
This will enable automatic recovery in case of a crash.
.Sp
See also the \fIdb_recover\fR utility, and
<file:///usr/local/BerkeleyDB/docs/gsg_txn/C/architectrecovery.html#multiprocessrecovery>
.IP "multiversion" 4
.IX Item "multiversion"
Enables multiversioning concurrency.
.Sp
See
http://www.oracle.com/technology/documentation/berkeley\-db/db/gsg_txn/C/isolation.html#snapshot_isolation <http://www.oracle.com/technology/documentation/berkeley-db/db/gsg_txn/C/isolation.html#snapshot_isolation>
.IP "snapshot" 4
.IX Item "snapshot"
Whether or not \f(CW\*(C`DB_TXN_SNAPSHOT\*(C'\fR should be passed to \f(CW\*(C`txn_begin\*(C'\fR.
.Sp
If \f(CW\*(C`multiversion\*(C'\fR is not true, this is a noop.
.Sp
Defaults to true.
.Sp
Using \f(CW\*(C`DB_TXN_SNAPSHOT\*(C'\fR means will cause copy on write multiversioning
concurrency instead of locking concurrency.
.Sp
This can improve read responsiveness for applications with long running
transactions, by allowing a page to be read even if it is being written to in
another transaction since the writer is modifying its own copy of the page.
.Sp
This is an alternative to enabling reading of uncomitted data, and provides the
same read performance while maintaining snapshot isolation at the cost of more
memory.
.IP "read_uncomitted" 4
.IX Item "read_uncomitted"
Enables uncomitted reads.
.Sp
This breaks the I in \s-1ACID\s0, since transactions are no longer isolated.
.Sp
A better approaach to increase read performance when there are long running
writing transactions is to enable multiversioning.
.IP "log_auto_remove" 4
.IX Item "log_auto_remove"
Enables automatic removal of logs.
.Sp
Normally logs should be removed after being backed up, but if you are not
interested in having full snapshot backups for catastrophic recovery scenarios,
you can enable this.
.Sp
See http://www.oracle.com/technology/documentation/berkeley\-db/db/ref/transapp/logfile.html <http://www.oracle.com/technology/documentation/berkeley-db/db/ref/transapp/logfile.html>.
.Sp
Defaults to false.
.IP "sync" 4
.IX Item "sync"
Enables syncing of \s-1BDB\s0 log writing.
.Sp
Defaults to true.
.Sp
If disabled, transaction writing will not be synced. This means that in the
event of a crash some successfully comitted transactions might still be rolled
back during recovery, but the database will still be in tact and atomicity is
still guaranteed.
.Sp
This is useful for bulk imports as it can significantly increase performance of
smaller transactions.
.IP "dup" 4
.IX Item "dup"
Enables \f(CW\*(C`DB_DUP\*(C'\fR in \f(CW\*(C`\-Properties\*(C'\fR, allowing duplicate keys in the db.
.Sp
Defaults to false.
.IP "dupsort" 4
.IX Item "dupsort"
Enables \f(CW\*(C`DB_DUPSORT\*(C'\fR in \f(CW\*(C`\-Properties\*(C'\fR.
.Sp
Defaults to false.
.IP "db_class" 4
.IX Item "db_class"
The default class to use when instantiating new \s-1DB\s0 objects. Defaults to
BerkeleyDB::Btree.
.IP "env_flags" 4
.IX Item "env_flags"
Flags to pass to the env. Overrides \f(CW\*(C`transactions\*(C'\fR, \f(CW\*(C`create\*(C'\fR and \f(CW\*(C`recover\*(C'\fR.
.IP "db_flags" 4
.IX Item "db_flags"
Flags to pass to \f(CW\*(C`instantiate_db\*(C'\fR. Overrides \f(CW\*(C`create\*(C'\fR and \f(CW\*(C`autocommit\*(C'\fR.
.IP "db_properties" 4
.IX Item "db_properties"
Properties to pass to \f(CW\*(C`instantiate_db\*(C'\fR. Overrides \f(CW\*(C`dup\*(C'\fR and \f(CW\*(C`dupsort\*(C'\fR.
.IP "open_dbs" 4
.IX Item "open_dbs"
The hash of currently open dbs.
.IP "chunk_size" 4
.IX Item "chunk_size"
See \f(CW\*(C`cursor_stream\*(C'\fR.
.Sp
Defaults to 500.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "open_db %args" 4
.el .IP "open_db \f(CW%args\fR" 4
.IX Item "open_db %args"
Fetch a database handle, opening it as necessary.
.Sp
If \f(CW\*(C`name\*(C'\fR is provided, it is used as the key in \f(CW\*(C`open_dbs\*(C'\fR. Otherwise \f(CW\*(C`file\*(C'\fR
is taken from \f(CW%args\fR.
.Sp
Calls \f(CW\*(C`instantiate_db\*(C'\fR
.ie n .IP "close_db $name" 4
.el .IP "close_db \f(CW$name\fR" 4
.IX Item "close_db $name"
Close the \s-1DB\s0 with the key \f(CW$name\fR
.ie n .IP "get_db $name" 4
.el .IP "get_db \f(CW$name\fR" 4
.IX Item "get_db $name"
Fetch the db specified by \f(CW$name\fR if it is already open.
.ie n .IP "register_db $name, $handle" 4
.el .IP "register_db \f(CW$name\fR, \f(CW$handle\fR" 4
.IX Item "register_db $name, $handle"
Registers the \s-1DB\s0 as open.
.ie n .IP "instantiate_db %args" 4
.el .IP "instantiate_db \f(CW%args\fR" 4
.IX Item "instantiate_db %args"
Instantiates a new database handle.
.Sp
\&\f(CW\*(C`file\*(C'\fR is a required argument.
.Sp
If \f(CW\*(C`class\*(C'\fR is not provided, the \*(L"db_class\*(R" will be used in place.
.Sp
If \f(CW\*(C`txn\*(C'\fR is not provided and the env has transactions enabled, the current
transaction if any is used. See \f(CW\*(C`txn_do\*(C'\fR
.Sp
\&\f(CW\*(C`flags\*(C'\fR and \f(CW\*(C`properties\*(C'\fR can be overridden manually. If they are not provided
\&\f(CW\*(C`build_db_flags\*(C'\fR and \f(CW\*(C`build_db_properties\*(C'\fR will be used.
.IP "instantiate_hash" 4
.IX Item "instantiate_hash"
.PD 0
.IP "instantiate_btree" 4
.IX Item "instantiate_btree"
.PD
Convenience wrappers for \f(CW\*(C`instantiate_db\*(C'\fR that set \f(CW\*(C`class\*(C'\fR.
.ie n .IP "build_db_properties %args" 4
.el .IP "build_db_properties \f(CW%args\fR" 4
.IX Item "build_db_properties %args"
Merges argument options into a flag integer.
.Sp
Default arguments are taken from the \f(CW\*(C`dup\*(C'\fR and \f(CW\*(C`dupsort\*(C'\fR attrs.
.ie n .IP "build_db_flags %args" 4
.el .IP "build_db_flags \f(CW%args\fR" 4
.IX Item "build_db_flags %args"
Merges argument options into a flag integer.
.Sp
Default arguments are taken from the \f(CW\*(C`autocommit\*(C'\fR and \f(CW\*(C`create\*(C'\fR attrs.
.IP "txn_do sub { }" 4
.IX Item "txn_do sub { }"
Executes the subroutine in an \f(CW\*(C`eval\*(C'\fR block. Calls \f(CW\*(C`txn_commit\*(C'\fR if the
transaction was successful, or \f(CW\*(C`txn_rollback\*(C'\fR if it wasn't.
.Sp
Transactions are kept on a stack internally.
.IP "txn_begin" 4
.IX Item "txn_begin"
Begin a new transaction.
.Sp
The new transaction is set as the active transaction for all registered
database handles.
.Sp
If \f(CW\*(C`multiversion\*(C'\fR is enabled \f(CW\*(C`DB_TXN_SNAPSHOT\*(C'\fR is passed in as well.
.IP "txn_commit" 4
.IX Item "txn_commit"
Commit the currnet transaction.
.Sp
Will die on error.
.IP "txn_rollback" 4
.IX Item "txn_rollback"
Rollback the current transaction.
.IP "txn_checkpoint" 4
.IX Item "txn_checkpoint"
Calls \f(CW\*(C`txn_checkpoint\*(C'\fR on \f(CW\*(C`env\*(C'\fR with \f(CW\*(C`checkpoint_kbyte\*(C'\fR and \f(CW\*(C`checkpoint_min\*(C'\fR.
.Sp
This is called automatically by \f(CW\*(C`txn_commit\*(C'\fR if \f(CW\*(C`auto_checkpoint\*(C'\fR is set.
.ie n .IP "associate %args" 4
.el .IP "associate \f(CW%args\fR" 4
.IX Item "associate %args"
Associate \f(CW\*(C`secondary\*(C'\fR with \f(CW\*(C`primary\*(C'\fR, using \f(CW\*(C`callback\*(C'\fR to extract keys.
.Sp
\&\f(CW\*(C`callback\*(C'\fR is invoked with the primary \s-1DB\s0 key and the value on every update to
\&\f(CW\*(C`primary\*(C'\fR, and is expected to return a key (or with recent BerkeleyDB also
an array reference of keys) with which to create indexed entries.
.Sp
Fetching on \f(CW\*(C`secondary\*(C'\fR with a secondary key returns the value from \f(CW\*(C`primary\*(C'\fR.
.Sp
Fetching with \f(CW\*(C`pb_get\*(C'\fR will also return the primary key.
.Sp
See the \s-1BDB\s0 documentation for more details.
.IP "all_open_dbs" 4
.IX Item "all_open_dbs"
Returns a list of all the registered databases.
.ie n .IP "cursor_stream %args" 4
.el .IP "cursor_stream \f(CW%args\fR" 4
.IX Item "cursor_stream %args"
Fetches data from a cursor, returning a Data::Stream::Bulk.
.Sp
If \f(CW\*(C`cursor\*(C'\fR is not provided but \f(CW\*(C`db\*(C'\fR is, a new cursor will be created.
.Sp
If \f(CW\*(C`callback\*(C'\fR is provided it will be invoked on the cursor with an accumilator
array repeatedly until it returns a false value. For example, to extract
triplets from a secondary index, you can use this callback:
.Sp
.Vb 1
\&        my ( $sk, $pk, $v ) = ( \*(Aq\*(Aq, \*(Aq\*(Aq, \*(Aq\*(Aq ); # to avoid uninitialized warnings from BDB
\&
\&        $m\->cursor_stream(
\&                db => $db,
\&                callback => {
\&                        my ( $cursor, $accumilator ) = @_;
\&
\&                        if ( $cursor\->c_pget( $sk, $pk, $v ) == 0 ) {
\&                                push @$accumilator, [ $sk, $pk, $v ];
\&                                return 1;
\&                        }
\&
\&                        return; # nothing left
\&                }
\&        );
.Ve
.Sp
If it is not provided, \f(CW\*(C`c_get\*(C'\fR will be used, returning \f(CW\*(C`[ $key, $value ]\*(C'\fR for
each cursor position. \f(CW\*(C`flag\*(C'\fR can be passed, and defaults to \f(CW\*(C`DB_NEXT\*(C'\fR.
.Sp
\&\f(CW\*(C`chunk_size\*(C'\fR controls the number of pairs returned in each chunk. If it isn't
provided the attribute \f(CW\*(C`chunk_size\*(C'\fR is used instead.
.Sp
If \f(CW\*(C`values\*(C'\fR or \f(CW\*(C`keys\*(C'\fR is set to a true value then only values or keys will be
returned. These two arguments are mutually exclusive.
.Sp
Lastly, \f(CW\*(C`init\*(C'\fR is an optional callback that is invoked once before each chunk,
that can be used to set up the database. The return value is retained until the
chunk is finished, so this callback can return a Scope::Guard to perform
cleanup.
.ie n .IP "dup_cursor_stream %args" 4
.el .IP "dup_cursor_stream \f(CW%args\fR" 4
.IX Item "dup_cursor_stream %args"
A specialization of \f(CW\*(C`cursor_stream\*(C'\fR for fetching duplicate key entries.
.Sp
Takes the same arguments as \f(CW\*(C`cursor_stream\*(C'\fR, but adds a few more.
.Sp
\&\f(CW\*(C`key\*(C'\fR can be passed in to initialize the cursor with \f(CW\*(C`DB_SET\*(C'\fR.
.Sp
To do manual initialization \f(CW\*(C`callback_first\*(C'\fR can be provided instead.
.Sp
\&\f(CW\*(C`callback\*(C'\fR is generated to use \f(CW\*(C`DB_NEXT_DUP\*(C'\fR instead of \f(CW\*(C`DB_NEXT\*(C'\fR, and
\&\f(CW\*(C`flag\*(C'\fR is ignored.
.SH "VERSION CONTROL"
.IX Header "VERSION CONTROL"
http://github.com/nothingmuch/berkeleydb\-manager <http://github.com/nothingmuch/berkeleydb-manager>
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuval Kogman <nothingmuch@woobling.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&        Copyright (c) 2008 Yuval Kogman. All rights reserved
\&        This program is free software; you can redistribute
\&        it and/or modify it under the same terms as Perl itself.
.Ve
