.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Engine::FastCGI 3"
.TH Catalyst::Engine::FastCGI 3 "2010-03-06" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Engine::FastCGI \- FastCGI Engine
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the FastCGI engine.
.SH "OVERLOADED METHODS"
.IX Header "OVERLOADED METHODS"
This class overloads some methods from \f(CW\*(C`Catalyst::Engine::CGI\*(C'\fR.
.ie n .SS "$self\->run($c, $listen, { option => value, ... })"
.el .SS "\f(CW$self\fP\->run($c, \f(CW$listen\fP, { option => value, ... })"
.IX Subsection "$self->run($c, $listen, { option => value, ... })"
Starts the FastCGI server.  If \f(CW$listen\fR is set, then it specifies a
location to listen for FastCGI requests;
.IP "/path" 4
.IX Item "/path"
listen via Unix sockets on /path
.IP ":port" 4
.IX Item ":port"
listen via \s-1TCP\s0 on port on all interfaces
.IP "hostname:port" 4
.IX Item "hostname:port"
listen via \s-1TCP\s0 on port bound to hostname
.PP
Options may also be specified;
.IP "leave_umask" 4
.IX Item "leave_umask"
Set to 1 to disable setting umask to 0 for socket open
.IP "nointr" 4
.IX Item "nointr"
Do not allow the listener to be interrupted by Ctrl+C
.IP "nproc" 4
.IX Item "nproc"
Specify a number of processes for FCGI::ProcManager
.IP "pidfile" 4
.IX Item "pidfile"
Specify a filename for the pid file
.IP "manager" 4
.IX Item "manager"
Specify a FCGI::ProcManager sub-class
.IP "detach" 4
.IX Item "detach"
Detach from console
.IP "keep_stderr" 4
.IX Item "keep_stderr"
Send \s-1STDERR\s0 to \s-1STDOUT\s0 instead of the webserver
.ie n .SS "$self\->write($c, $buffer)"
.el .SS "\f(CW$self\fP\->write($c, \f(CW$buffer\fP)"
.IX Subsection "$self->write($c, $buffer)"
.ie n .SS "$self\->\fIdaemon_fork()\fP"
.el .SS "\f(CW$self\fP\->\fIdaemon_fork()\fP"
.IX Subsection "$self->daemon_fork()"
Performs the first part of daemon initialisation.  Specifically,
forking.  \s-1STDERR\s0, etc are still connected to a terminal.
.ie n .SS "$self\->daemon_detach( )"
.el .SS "\f(CW$self\fP\->daemon_detach( )"
.IX Subsection "$self->daemon_detach( )"
Performs the second part of daemon initialisation.  Specifically,
disassociates from the terminal.
.PP
However, this does \fBnot\fR change the current working directory to \*(L"/\*(R",
as normal daemons do.  It also does not close all open file
descriptors (except \s-1STDIN\s0, \s-1STDOUT\s0 and \s-1STDERR\s0, which are re-opened from
\&\fI/dev/null\fR).
.ie n .SS "$self\->_fix_env( $env )"
.el .SS "\f(CW$self\fP\->_fix_env( \f(CW$env\fP )"
.IX Subsection "$self->_fix_env( $env )"
Adjusts the environment variables when necessary.
.SH "WEB SERVER CONFIGURATIONS"
.IX Header "WEB SERVER CONFIGURATIONS"
.SS "Standalone FastCGI Server"
.IX Subsection "Standalone FastCGI Server"
In server mode the application runs as a standalone server and accepts
connections from a web server.  The application can be on the same machine as
the web server, on a remote machine, or even on multiple remote machines.
Advantages of this method include running the Catalyst application as a
different user than the web server, and the ability to set up a scalable
server farm.
.PP
To start your application in server mode, install the FCGI::ProcManager
module and then use the included fastcgi.pl script.
.PP
.Vb 1
\&    $ script/myapp_fastcgi.pl \-l /tmp/myapp.socket \-n 5
.Ve
.PP
Command line options for fastcgi.pl include:
.PP
.Vb 4
\&    \-d \-daemon     Daemonize the server.
\&    \-p \-pidfile    Write a pidfile with the pid of the process manager.
\&    \-l \-listen     Listen on a socket path, hostname:port, or :port.
\&    \-n \-nproc      The number of processes started to handle requests.
.Ve
.PP
See below for the specific web server configurations for using the external
server.
.SS "Apache 1.x, 2.x"
.IX Subsection "Apache 1.x, 2.x"
Apache requires the mod_fastcgi module.  The same module supports both
Apache 1 and 2.
.PP
There are three ways to run your application under FastCGI on Apache: server,
static, and dynamic.
.PP
\fIStandalone server mode\fR
.IX Subsection "Standalone server mode"
.PP
.Vb 2
\&    FastCgiExternalServer /tmp/myapp.fcgi \-socket /tmp/myapp.socket
\&    Alias /myapp/ /tmp/myapp.fcgi/
\&
\&    # Or, run at the root
\&    Alias / /tmp/myapp.fcgi/
\&
\&    # Optionally, rewrite the path when accessed without a trailing slash
\&    RewriteRule ^/myapp$ myapp/ [R]
.Ve
.PP
The FastCgiExternalServer directive tells Apache that when serving
/tmp/myapp to use the FastCGI application listenting on the socket
/tmp/mapp.socket.  Note that /tmp/myapp.fcgi \fB\s-1MUST\s0 \s-1NOT\s0\fR exist \*(--
it's a virtual file name.  With some versions of \f(CW\*(C`mod_fastcgi\*(C'\fR or
\&\f(CW\*(C`mod_fcgid\*(C'\fR, you can use any name you like, but some require that the
virtual filename end in \f(CW\*(C`.fcgi\*(C'\fR.
.PP
It's likely that Apache is not configured to serve files in /tmp, so the
Alias directive maps the url path /myapp/ to the (virtual) file that runs the
FastCGI application. The trailing slashes are important as their use will
correctly set the \s-1PATH_INFO\s0 environment variable used by Catalyst to
determine the request path.  If you would like to be able to access your app
without a trailing slash (http://server/myapp), you can use the above
RewriteRule directive.
.PP
\fIStatic mode\fR
.IX Subsection "Static mode"
.PP
The term 'static' is misleading, but in static mode Apache uses its own
FastCGI Process Manager to start the application processes.  This happens at
Apache startup time.  In this case you do not run your application's
fastcgi.pl script \*(-- that is done by Apache. Apache then maps URIs to the
FastCGI script to run your application.
.PP
.Vb 2
\&    FastCgiServer /path/to/myapp/script/myapp_fastcgi.pl \-processes 3
\&    Alias /myapp/ /path/to/myapp/script/myapp_fastcgi.pl/
.Ve
.PP
FastCgiServer tells Apache to start three processes of your application at
startup.  The Alias command maps a path to the FastCGI application. Again,
the trailing slashes are important.
.PP
\fIDynamic mode\fR
.IX Subsection "Dynamic mode"
.PP
In FastCGI dynamic mode, Apache will run your application on demand,
typically by requesting a file with a specific extension (e.g. .fcgi).  ISPs
often use this type of setup to provide FastCGI support to many customers.
.PP
In this mode it is often enough to place or link your *_fastcgi.pl script in
your cgi-bin directory with the extension of .fcgi.  In dynamic mode Apache
must be able to run your application as a \s-1CGI\s0 script so ExecCGI must be
enabled for the directory.
.PP
.Vb 1
\&    AddHandler fastcgi\-script .fcgi
.Ve
.PP
The above tells Apache to run any .fcgi file as a FastCGI application.
.PP
Here is a complete example:
.PP
.Vb 3
\&    <VirtualHost *:80>
\&        ServerName www.myapp.com
\&        DocumentRoot /path/to/MyApp
\&
\&        # Allow CGI script to run
\&        <Directory /path/to/MyApp>
\&            Options +ExecCGI
\&        </Directory>
\&
\&        # Tell Apache this is a FastCGI application
\&        <Files myapp_fastcgi.pl>
\&            SetHandler fastcgi\-script
\&        </Files>
\&    </VirtualHost>
.Ve
.PP
Then a request for /script/myapp_fastcgi.pl will run the
application.
.PP
For more information on using FastCGI under Apache, visit
<http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html>
.PP
\fIAuthorization header with mod_fastcgi or mod_cgi\fR
.IX Subsection "Authorization header with mod_fastcgi or mod_cgi"
.PP
By default, mod_fastcgi/mod_cgi do not pass along the Authorization header,
so modules like \f(CW\*(C`Catalyst::Plugin::Authentication::Credential::HTTP\*(C'\fR will
not work.  To enable pass-through of this header, add the following
mod_rewrite directives:
.PP
.Vb 2
\&    RewriteCond %{HTTP:Authorization} ^(.+)
\&    RewriteRule ^(.*)$ $1 [E=HTTP_AUTHORIZATION:%1,PT]
.Ve
.SS "Lighttpd"
.IX Subsection "Lighttpd"
These configurations were tested with Lighttpd 1.4.7.
.PP
\fIStandalone server mode\fR
.IX Subsection "Standalone server mode"
.PP
.Vb 1
\&    server.document\-root = "/var/www/MyApp/root"
\&
\&    fastcgi.server = (
\&        "" => (
\&            "MyApp" => (
\&                "socket"      => "/tmp/myapp.socket",
\&                "check\-local" => "disable"
\&            )
\&        )
\&    )
.Ve
.PP
\fIStatic mode\fR
.IX Subsection "Static mode"
.PP
.Vb 1
\&    server.document\-root = "/var/www/MyApp/root"
\&
\&    fastcgi.server = (
\&        "" => (
\&            "MyApp" => (
\&                "socket"       => "/tmp/myapp.socket",
\&                "check\-local"  => "disable",
\&                "bin\-path"     => "/var/www/MyApp/script/myapp_fastcgi.pl",
\&                "min\-procs"    => 2,
\&                "max\-procs"    => 5,
\&                "idle\-timeout" => 20
\&            )
\&        )
\&    )
.Ve
.PP
Note that in newer versions of lighttpd, the min-procs and idle-timeout
values are disabled.  The above example would start 5 processes.
.PP
\fINon-root configuration\fR
.IX Subsection "Non-root configuration"
.PP
You can also run your application at any non-root location with either of the
above modes.  Note the required mod_rewrite rule.
.PP
.Vb 8
\&    url.rewrite = ( "myapp\e$" => "myapp/" )
\&    fastcgi.server = (
\&        "/myapp" => (
\&            "MyApp" => (
\&                # same as above
\&            )
\&        )
\&    )
.Ve
.PP
For more information on using FastCGI under Lighttpd, visit
<http://www.lighttpd.net/documentation/fastcgi.html>
.SS "nginx"
.IX Subsection "nginx"
Catalyst runs under nginx via FastCGI in a similar fashion as the lighttpd
standalone server as described above.
.PP
nginx does not have its own internal FastCGI process manager, so you must run
the FastCGI service separately.
.PP
\fIConfiguration\fR
.IX Subsection "Configuration"
.PP
To configure nginx, you must configure the FastCGI parameters and also the
socket your FastCGI daemon is listening on.  It can be either a \s-1TCP\s0 socket
or a Unix file socket.
.PP
The server configuration block should look roughly like:
.PP
.Vb 2
\&    server {
\&        listen $port;
\&
\&        location / {
\&            fastcgi_param  QUERY_STRING       $query_string;
\&            fastcgi_param  REQUEST_METHOD     $request_method;
\&            fastcgi_param  CONTENT_TYPE       $content_type;
\&            fastcgi_param  CONTENT_LENGTH     $content_length;
\&
\&            fastcgi_param  SCRIPT_NAME        /;
\&            fastcgi_param  PATH_INFO          $fastcgi_script_name;
\&            fastcgi_param  REQUEST_URI        $request_uri;
\&            fastcgi_param  DOCUMENT_URI       $document_uri;
\&            fastcgi_param  DOCUMENT_ROOT      $document_root;
\&            fastcgi_param  SERVER_PROTOCOL    $server_protocol;
\&
\&            fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
\&            fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
\&
\&            fastcgi_param  REMOTE_ADDR        $remote_addr;
\&            fastcgi_param  REMOTE_PORT        $remote_port;
\&            fastcgi_param  SERVER_ADDR        $server_addr;
\&            fastcgi_param  SERVER_PORT        $server_port;
\&            fastcgi_param  SERVER_NAME        $server_name;
\&        
\&            # Adjust the socket for your applications!
\&            fastcgi_pass   unix:$docroot/myapp.socket;
\&        }
\&    }
.Ve
.PP
It is the standard convention of nginx to include the fastcgi_params in a
separate file (usually something like \f(CW\*(C`/etc/nginx/fastcgi_params\*(C'\fR) and
simply include that file.
.PP
\fINon-root configuration\fR
.IX Subsection "Non-root configuration"
.PP
If you properly specify the \s-1PATH_INFO\s0 and \s-1SCRIPT_NAME\s0 parameters your
application will be accessible at any path. The \s-1SCRIPT_NAME\s0 variable is the
prefix of your application, and \s-1PATH_INFO\s0 would be everything in addition.
.PP
As an example, if your application is rooted at /myapp, you would configure:
.PP
.Vb 2
\&    fastcgi_param  SCRIPT_NAME /myapp/;
\&    fastcgi_param  PATH_INFO   $fastcgi_script_name;
.Ve
.PP
\&\f(CW$fastcgi_script_name\fR would be \*(L"/myapp/path/of/the/action\*(R".  Catalyst will
process this accordingly and setup the application base as expected.
.PP
This behavior is somewhat different than Apache and Lighttpd, but is still
functional.
.PP
For more information on nginx, visit:
<http://nginx.net>
.SS "Microsoft \s-1IIS\s0"
.IX Subsection "Microsoft IIS"
It is possible to run Catalyst under \s-1IIS\s0 with FastCGI, but only on \s-1IIS\s0 6.0
(Microsoft Windows 2003), \s-1IIS\s0 7.0 (Microsoft Windows 2008 and Vista) and
hopefully its successors.
.PP
Even if it is declared that FastCGI is supported on \s-1IIS\s0 5.1 (Windows \s-1XP\s0) it
does not support some features (specifically: wildcard mappings) that prevents
running Catalyst application.
.PP
Let us assume that our server has the following layout:
.PP
.Vb 3
\&    d:\eWWW\eWebApp\e                   path to our Catalyst application
\&    d:\estrawberry\eperl\ebin\eperl.exe  path to perl interpreter (with Catalyst installed)
\&    c:\ewindows                       Windows directory
.Ve
.PP
\fISetup \s-1IIS\s0 6.0 (Windows 2003)\fR
.IX Subsection "Setup IIS 6.0 (Windows 2003)"
.IP "Install FastCGI extension for \s-1IIS\s0 6.0" 4
.IX Item "Install FastCGI extension for IIS 6.0"
FastCGI is not a standard part of \s-1IIS\s0 6 \- you have to install it separately. For
more info and download go to <http://www.iis.net/extensions/FastCGI>. Choose
approptiate version (32\-bit/64\-bit), installation is quite simple
(in fact no questions, no options).
.IP "Create a new website" 4
.IX Item "Create a new website"
Open \*(L"Control Panel\*(R" > \*(L"Administrative Tools\*(R" > \*(L"Internet Information Services Manager\*(R".
Click \*(L"Action\*(R" > \*(L"New\*(R" > \*(L"Web Site\*(R". After you finish the installation wizard
you need to go to the new website's properties.
.IP "Set website properties" 4
.IX Item "Set website properties"
On tab \*(L"Web site\*(R" set proper values for:
Site Description, \s-1IP\s0 Address, \s-1TCP\s0 Port, \s-1SSL\s0 Port etc.
.Sp
On tab \*(L"Home Directory\*(R" set the following:
.Sp
.Vb 3
\&    Local path: "d:\eWWW\eWebApp\eroot"
\&    Local path permission flags: check only "Read" + "Log visits"
\&    Execute permitions: "Scripts only"
.Ve
.Sp
Click \*(L"Configuration\*(R" button (still on Home Directory tab) then click \*(L"Insert\*(R"
the wildcard application mapping and in the next dialog set:
.Sp
.Vb 2
\&    Executable: "c:\ewindows\esystem32\einetsrv\efcgiext.dll"
\&    Uncheck: "Verify that file exists"
.Ve
.Sp
Close all dialogs with \*(L"\s-1OK\s0\*(R".
.IP "Edit fcgiext.ini" 4
.IX Item "Edit fcgiext.ini"
Put the following lines into c:\ewindows\esystem32\einetsrv\efcgiext.ini (on 64\-bit
system c:\ewindows\esyswow64\einetsrv\efcgiext.ini):
.Sp
.Vb 12
\&    [Types]
\&    *:8=CatalystApp
\&    ;replace 8 with the identification number of the newly created website
\&    ;it is not so easy to get this number:
\&    ; \- you can use utility "c:\einetpub\eadminscripts\eadsutil.vbs"
\&    ;   to list websites:   "cscript adsutil.vbs ENUM /P /W3SVC"
\&    ;   to get site name:   "cscript adsutil.vbs GET /W3SVC/<number>/ServerComment"
\&    ;   to get all details: "cscript adsutil.vbs GET /W3SVC/<number>"
\&    ; \- or look where are the logs located:
\&    ;   c:\eWINDOWS\eSYSTEM32\eLogfiles\eW3SVC7\ewhatever.log
\&    ;   means that the corresponding number is "7"
\&    ;if you are running just one website using FastCGI you can use \*(Aq*=CatalystApp\*(Aq
\&
\&    [CatalystApp]
\&    ExePath=d:\estrawberry\eperl\ebin\eperl.exe
\&    Arguments="d:\eWWW\eWebApp\escript\ewebapp_fastcgi.pl \-e"
\&
\&    ;by setting this you can instruct IIS to serve Catalyst static files
\&    ;directly not via FastCGI (in case of any problems try 1)
\&    IgnoreExistingFiles=0
\&
\&    ;do not be fooled by Microsoft doc talking about "IgnoreExistingDirectories"
\&    ;that does not work and use "IgnoreDirectories" instead
\&    IgnoreDirectories=1
.Ve
.PP
\fISetup \s-1IIS\s0 7.0 (Windows 2008 and Vista)\fR
.IX Subsection "Setup IIS 7.0 (Windows 2008 and Vista)"
.PP
Microsoft \s-1IIS\s0 7.0 has built-in support for FastCGI so you do not have to install
any addons.
.IP "Necessary steps during \s-1IIS7\s0 installation" 4
.IX Item "Necessary steps during IIS7 installation"
During \s-1IIS7\s0 installation after you have added role \*(L"Web Server (\s-1IIS\s0)\*(R"
you need to check to install role feature \*(L"\s-1CGI\s0\*(R" (do not be nervous that it is
not FastCGI). If you already have \s-1IIS7\s0 installed you can add \*(L"\s-1CGI\s0\*(R" role feature
through \*(L"Control panel\*(R" > \*(L"Programs and Features\*(R".
.IP "Create a new website" 4
.IX Item "Create a new website"
Open \*(L"Control Panel\*(R" > \*(L"Administrative Tools\*(R" > \*(L"Internet Information Services Manager\*(R"
> \*(L"Add Web Site\*(R".
.Sp
.Vb 3
\&    site name: "CatalystSite"
\&    content directory: "d:\eWWW\eWebApp\eroot"
\&    binding: set proper IP address, port etc.
.Ve
.IP "Configure FastCGI" 4
.IX Item "Configure FastCGI"
You can configure FastCGI extension using commandline utility
\&\*(L"c:\ewindows\esystem32\einetsrv\eappcmd.exe\*(R"
.RS 4
.ie n .IP "Configuring section ""fastCgi"" (it is a global setting)" 4
.el .IP "Configuring section ``fastCgi'' (it is a global setting)" 4
.IX Item "Configuring section fastCgi (it is a global setting)"
.Vb 1
\&  appcmd.exe set config \-section:system.webServer/fastCgi /+"[fullPath=\*(Aqd:\estrawberry\eperl\ebin\eperl.exe\*(Aq,arguments=\*(Aqd:\ewww\eWebApp\escript\ewebapp_fastcgi.pl \-e\*(Aq,maxInstances=\*(Aq4\*(Aq,idleTimeout=\*(Aq300\*(Aq,activityTimeout=\*(Aq30\*(Aq,requestTimeout=\*(Aq90\*(Aq,instanceMaxRequests=\*(Aq1000\*(Aq,protocol=\*(AqNamedPipe\*(Aq,flushNamedPipe=\*(AqFalse\*(Aq]" /commit:apphost
.Ve
.IP "Configuring proper handler (it is a site related setting)" 4
.IX Item "Configuring proper handler (it is a site related setting)"
.Vb 1
\&  appcmd.exe set config "CatalystSite" \-section:system.webServer/handlers /+"[name=\*(AqCatalystFastCGI\*(Aq,path=\*(Aq*\*(Aq,verb=\*(AqGET,HEAD,POST\*(Aq,modules=\*(AqFastCgiModule\*(Aq,scriptProcessor=\*(Aqd:\estrawberry\eperl\ebin\eperl.exe|d:\ewww\eWebApp\escript\ewebapp_fastcgi.pl \-e\*(Aq,resourceType=\*(AqUnspecified\*(Aq,requireAccess=\*(AqScript\*(Aq]" /commit:apphost
.Ve
.Sp
Note: before launching the commands above do not forget to change site
name and paths to values relevant for your server setup.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst, \s-1FCGI\s0.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "THANKS"
.IX Header "THANKS"
Bill Moseley, for documentation updates and testing.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.
