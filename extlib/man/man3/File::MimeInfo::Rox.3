.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::MimeInfo::Rox 3"
.TH File::MimeInfo::Rox 3 "2010-10-02" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::MimeInfo::Rox \- Open files by mimetype "Rox style"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use File::MimeInfo::Magic;
\&  use File::MimeInfo::Rox qw/:magic/;
\&  
\&  # open some file with the apropriate program
\&  mime_system($somefile);
\&
\&  # more verbose version
\&  my $mt = mimetype($somefile)
\&      || die "Could not find mimetype for $somefile\en";
\&  mime_system($somefile, $mt)
\&      || die "No program to open $somefile available\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to mimic the behaviour of the rox file
browser <http://rox.sf.net> when \*(L"opening\*(R" data files.
It determines the mime type and searches in rox's \f(CW\*(C`Choices\*(C'\fR
directories for a program to handle that mimetype.
.PP
See the rox documentation for an extensive discussion of this
mechanism.
.SH "EXPORT"
.IX Header "EXPORT"
The methods \f(CW\*(C`mime_exec\*(C'\fR and \f(CW\*(C`mime_system\*(C'\fR are exported, 
if you use the export tag \f(CW\*(C`:magic\*(C'\fR you get the same methods
but File::MimeInfo::Magic will be used for mimetype lookup.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`CHOICESPATH\*(C'\fR is used when searching
for rox's config dirs. It defaults to 
\&\f(CW\*(C`$ENV{HOME}/Choices:/usr/local/share/Choices:/usr/share/Choices\*(C'\fR
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """mime_system($file)""" 4
.el .IP "\f(CWmime_system($file)\fR" 4
.IX Item "mime_system($file)"
.PD 0
.ie n .IP """mime_system($file, $mimetype, @_)""" 4
.el .IP "\f(CWmime_system($file, $mimetype, @_)\fR" 4
.IX Item "mime_system($file, $mimetype, @_)"
.PD
Try to open \f(CW$file\fR with the appropriate program for files of
it's mimetype. You can use \f(CW$mimetype\fR to force the mimetype.
Also if you allready know the mimetype it saves a lot of time
to just tell it.
.Sp
If either the mimetype couldn't be determinated or
no appropriate program could be found \f(CW\*(C`undef\*(C'\fR is returned.
If the actual system failes an exception is raised.
.Sp
All remaining arguments are passed on to the handler.
.ie n .IP """mime_exec($file)""" 4
.el .IP "\f(CWmime_exec($file)\fR" 4
.IX Item "mime_exec($file)"
.PD 0
.ie n .IP """mime_exec($file, $mimetype, @_)""" 4
.el .IP "\f(CWmime_exec($file, $mimetype, @_)\fR" 4
.IX Item "mime_exec($file, $mimetype, @_)"
.PD
Like \f(CW\*(C`mime_system()\*(C'\fR but uses exec instead of system,
so it \fBnever returns\fR if successful.
.ie n .IP """suggest_script_name($mimetype)""" 4
.el .IP "\f(CWsuggest_script_name($mimetype)\fR" 4
.IX Item "suggest_script_name($mimetype)"
Returns the list \f(CW\*(C`($dir, $file)\*(C'\fR for the suggested place
to write new script files (or symlinks) for mimetype \f(CW$mimetype\fR.
The suggested dir doesn't need to exist.
.SH "BUGS"
.IX Header "BUGS"
Please mail the author when you encounter any bugs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jaap Karssenberg || Pardus [Larus] <pardus@cpan.org>
.PP
Copyright (c) 2003,2008 Jaap G Karssenberg. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::MimeInfo,
File::MimeInfo::Magic,
<http://rox.sourceforce.net>
