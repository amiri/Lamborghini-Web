.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::MimeInfo::Cookbook 3"
.TH File::MimeInfo::Cookbook 3 "2010-10-02" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::MimeInfo::Cookbook \- various code snippets
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Some code snippets for non-basic uses of the File::MimeInfo
module:
.IP "\fBMatching an extension\fR" 4
.IX Item "Matching an extension"
A file does not have to actually exist in order to get a
mimetype for it. This means that the following will work:
.Sp
.Vb 2
\&  my $extension = \*(Aq*.txt\*(Aq;
\&  my $mimetype = mimetype( $extension );
.Ve
.IP "\fBMimetyping an scalar\fR" 4
.IX Item "Mimetyping an scalar"
If you want to find the mimetype of a scalar value you need magic
mimetyping; after all a scalar doesn't have a filename or inode.
What you need to do is to use IO::Scalar :
.Sp
.Vb 2
\&  use File::MimeInfo::Magic;
\&  use IO::Scalar;
\&  
\&  my $io_scalar = new IO::Scalar \e$data;
\&  my $mimetype = mimetype( $io_scalar );
.Ve
.Sp
In fact most other \f(CW\*(C`IO::\*(C'\fR will work as long as they support the \f(CW\*(C`seek()\*(C'\fR
and \f(CW\*(C`read()\*(C'\fR methods. Of course if you want really obscure things to
happen you can always write your own \s-1IO\s0 object and feed it in there.
.Sp
Be aware that when using a filehandle like this you need to set the \f(CW\*(C`:utf8\*(C'\fR
binmode yourself if apropriate.
.IP "\fBMimetyping a filehandle\fR" 4
.IX Item "Mimetyping a filehandle"
Regrettably for non-seekable filehandles like \s-1STDIN\s0 simply using an \f(CW\*(C`IO::\*(C'\fR
object will not work. You will need to buffer enough of the data for a proper
mimetyping. For example you could mimetype data from \s-1STDIN\s0 like this:
.Sp
.Vb 2
\&  use File::MimeInfo::Magic;
\&  use IO::Scalar;
\&
\&  my $data;
\&  read(STDIN, $data, $File::MimeInfo::Magic::max_buffer);
\&  my $io_scalar = new IO::Scalar \e$data;
\&  my $mimetype = mimetype( $io_scalar );
.Ve
.Sp
Be aware that when using a filehandle like this you need to set the \f(CW\*(C`:utf8\*(C'\fR
binmode yourself if apropriate.
.IP "\fBCreating a new filename\fR" 4
.IX Item "Creating a new filename"
Say you have a temporary file that you want to save with a more
proper filename.
.Sp
.Vb 2
\&  use File::MimeInfo::Magic qw#mimetype extensions#;
\&  use File::Copy;
\&  
\&  my $tmpfile = \*(Aq/tmp/foo\*(Aq;
\&  my $mimetype = mimetype($tmpfile);
\&  my $extension = extensions($mimetype);
\&  my $newfile = \*(Aquntitled1\*(Aq;
\&  $newfile .= \*(Aq.\*(Aq.$extension if length $extension;
\&  move($tmpfile, $newfile);
.Ve
.IP "\fBForce the use of a certain database directory\fR" 4
.IX Item "Force the use of a certain database directory"
Normally you just need to add the dir where your mime database lives
to either the \s-1XDG_DATA_HOME\s0 or \s-1XDG_DATA_DIRS\s0 environment variables
for it to be found. But in some rare cases you may want to by-pass
this system all together. Try one of the following:
.Sp
.Vb 3
\&  @File::MimeInfo::DIRS = (\*(Aq/home/me/share/mime\*(Aq);
\&  eval \*(Aquse File::MimeInfo\*(Aq;
\&  die if $@;
.Ve
.Sp
or:
.Sp
.Vb 3
\&  use File::MimeInfo;
\&  @File::MimeInfo::DIRS = (\*(Aq/home/me/share/mime\*(Aq);
\&  File::MimeInfo\->rehash();
.Ve
.Sp
This can also be used for switching between databases at run time
while leaving other \s-1XDG\s0 configuration stuff alone.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jaap Karssenberg (Pardus) <pardus@cpan.org>
.PP
Copyright (c) 2005,2008 Jaap G Karssenberg. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::MimeInfo
