.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Cookie::XS 3"
.TH Cookie::XS 3 "2008-09-11" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cookie::XS \- HTTP Cookie parser in C (Please use CGI::Cookie::XS instead)
.SH "VERSION"
.IX Header "VERSION"
This document describes Cookie::XS 0.11 released on September 12, 2008.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Cookie::XS;
\&
\&    my $raw_cookie = \*(Aqfoo=a%20phrase; haha; bar=yes%2C%20a%20phrase; baz=%5Ewibble&leiyh; qux=%27\*(Aq;
\&    my $res = Cookie::XS\->parse($raw_cookie);
\&    # $res is something like:
\&    #    {
\&    #      \*(Aqbar\*(Aq => [
\&    #                 \*(Aqyes, a phrase\*(Aq
\&    #               ],
\&    #      \*(Aqbaz\*(Aq => [
\&    #                 \*(Aq^wibble\*(Aq,
\&    #                 \*(Aqleiyh\*(Aq
\&    #               ],
\&    #      \*(Aqfoo\*(Aq => [
\&    #                 \*(Aqa phrase\*(Aq
\&    #               ],
\&    #      \*(Aqqux\*(Aq => [
\&    #                 \*(Aq\e\*(Aq\*(Aq
\&    #               ]
\&    #    };
\&
\&    # or directly read raw cookies from the CGI environments:
\&    $res = Cookie::XS\->fetch;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1WARNING:\s0 This module is obsolete now; please use CGI::Cookie::XS instead.\fR
.PP
This module implements a very simple parser for cookies used in \s-1HTTP\s0 applications. We've found CGI::Simple::Cookie and CGI::Cookie rather slow according to the profiling results for our OpenResty project, hence the rewrite in C.
.PP
This library is still in \fBpre-alpha\fR stage and the \s-1API\s0 is still in flux. We're just following the \*(L"release early, releaes often\*(R" guideline. So please check back often ;)
.SH "METHODS"
.IX Header "METHODS"
We currently provide 2 static methods, \f(CW\*(C`parse\*(C'\fR and \f(CW\*(C`fetch\*(C'\fR. They work mostly the same way as those methods found in CGI::Cookie and CGI::Simple::Cookie but with the exception that our version returns plain Perl data structures rather than hashes of Perl objects (due to performance considerations).
.PP
We'll implement some cookie dump methods in the near future.
.ie n .IP """$ref = Cookie::XS\->parse($raw_cookie)""" 4
.el .IP "\f(CW$ref = Cookie::XS\->parse($raw_cookie)\fR" 4
.IX Item "$ref = Cookie::XS->parse($raw_cookie)"
Parses \f(CW$raw_cookie\fR and returns the reference of a hash of arrays. The keys
of the hash are cookie variables' names while the values of the hash are lists of cookie variable's values.
.Sp
There is a length limit on the \f(CW$raw_cookie\fR. If \f(CW$raw_cookie\fR is longer than 4 \s-1KB\s0 (i.e. 4 * 1024 bytes, excluding the trailing '\e0'), the overflowing part will be truncated.
.Sp
Also note that, \f(CW\*(C`fetch\*(C'\fR does not assume any encoding on the cookie values. It just decodes the encoded entries verbatim and treat them as plain \*(L"binary\*(R" stuff.
.ie n .IP """$ref = Cookie::XS\->fetch()""" 4
.el .IP "\f(CW$ref = Cookie::XS\->fetch()\fR" 4
.IX Item "$ref = Cookie::XS->fetch()"
Reads the raw cookie from the \f(CW\*(C`HTTP_COOKIE\*(C'\fR and \f(CW\*(C`COOKIE\*(C'\fR environments
(which are usually set by \s-1HTTP\s0 servers like lighttd or apache) and then
parses the value using the \f(CW\*(C`parse\*(C'\fR method and finally returns the
results.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Removing trailing spaces in cookie values.
.SH "SOURCE CONTROL"
.IX Header "SOURCE CONTROL"
For the very latest version of this module, check out the source from
the \s-1SVN\s0 repos below:
.PP
<http://svn.openfoundry.org/cookieparser>
.PP
There is anonymous access to all. If you'd like a commit bit, please let
us know. :)
.SH "BUGS"
.IX Header "BUGS"
There must be some serious bugs lurking somewhere. We haven't done comprehensive testing for our code yet. It's a \s-1TODO\s0.
.PP
Please report bugs or send wish-list to
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Cookie\-XS <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Cookie-XS>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGI::Cookie, CGI::Cookie::Simple.
.SH "AUTHOR"
.IX Header "AUTHOR"
.ie n .IP "yuting ""<yuting at alibaba\-inc.com>""" 4
.el .IP "yuting \f(CW<yuting at alibaba\-inc.com>\fR" 4
.IX Item "yuting <yuting at alibaba-inc.com>"
.PD 0
.ie n .IP "agentzh ""<agentzh at yahoo.cn>""" 4
.el .IP "agentzh \f(CW<agentzh at yahoo.cn>\fR" 4
.IX Item "agentzh <agentzh at yahoo.cn>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2008 by Yahoo! China \s-1EEEE\s0 Works, Alibaba Inc.
.SH "License"
.IX Header "License"
The \*(L"\s-1MIT\s0\*(R" License
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \*(L"Software\*(R"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
.PP
\&\s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R", \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1THE\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1AND\s0 \s-1NONINFRINGEMENT\s0. \s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1AUTHORS\s0 \s-1OR\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1CLAIM\s0, \s-1DAMAGES\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1LIABILITY\s0, \s-1WHETHER\s0 \s-1IN\s0 \s-1AN\s0 \s-1ACTION\s0 \s-1OF\s0 \s-1CONTRACT\s0, \s-1TORT\s0 \s-1OR\s0 \s-1OTHERWISE\s0, \s-1ARISING\s0 \s-1FROM\s0, \s-1OUT\s0 \s-1OF\s0 \s-1OR\s0 \s-1IN\s0 \s-1CONNECTION\s0 \s-1WITH\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1OR\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1DEALINGS\s0 \s-1IN\s0 \s-1THE\s0 \s-1SOFTWARE\s0.
