.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::FormHandler::Manual::Reference 3"
.TH HTML::FormHandler::Manual::Reference 3 "2010-10-02" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::FormHandler::Manual::Reference \- concise reference
.SH "VERSION"
.IX Header "VERSION"
version 0.32003
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a concise reference of HTML::FormHandler.
.PP
HTML::FormHandler has a lot of options and many ways to customize your forms.
More complete documentation can be found at HTML::FormHandler,
HTML::FormHandler::Field, HTML::FormHandler::Model::DBIC,
HTML::FormHandler::Render::Simple, and in the individual field classes.
.SH "Fields"
.IX Header "Fields"
.SS "Attributes for fields defined in your form:"
.IX Subsection "Attributes for fields defined in your form:"
.Vb 10
\&   name          Field name. Must be the same as database column name or rel
\&   type          Field type. From a Field class: \*(AqText\*(Aq, \*(AqSelect\*(Aq, etc
\&   accessor      Database accessor name if different than field name
\&   set_validate  Name of validation method in form. Default is validate_$fieldname
\&   set_init      Name of the form method used to initialize a field
\&   required      Field is required
\&   required_message  If this field is required, the message to display on failure
\&   id            Useful for javascript that requires unique id. Set in Field.
\&   label         Text label. Not used by FormHandler, but useful in templates
\&   order         Set the order for fields. Used by sorted_fields, templates.
\&   widget        Used by templates to decide widget usage. Set by field classes.
\&   style         Style to use for css formatting. Not used by FormHandler; for templates.
\&   title         For HTML titles. Not used by FormHandler.
\&   password      Remove from params and do not display in forms.
\&   disabled      HTML hint to not do updates (for templates) Init: 0
\&   readonly      HTML hint to make the field readonly (for templates) Init: 0
\&   noupdate      Don\*(Aqt update this field in the database
\&   writeonly     Do not retrieve initial values
\&   errors        Errors associated with this field
\&                 (also num_errors, clear_errors, has_errors, add_error)
\&   label_column  Select lists: column to use for labels (default: name)
\&   active_column Select lists: which values to list
\&   sort_column   Select lists: column to use for sorting (default: label_column)
\&   size          Text & select fields.
\&   maxlength     Text fields. Validated.
\&   minlength     Text fields. Used in validation
\&   range_start   Range start for number fields
\&   range_end     Range end for number fields
\&   unique        Field should be unique in the database
\&   unique_message If field is not unique, error message.
\&   apply         Array of constraint/coercion/transformation actions
\&   value_changed Has the field\*(Aqs value changed from the init_value?
\&   dump          For debugging
.Ve
.SS "Field attributes not set in a user form"
.IX Subsection "Field attributes not set in a user form"
These attributes are usually accessed in a subroutine or in a template.
.PP
.Vb 5
\&   init_value    Initial value from the database
\&   value         The value of your field.
\&   input         Input value from parameter or initial value from database
\&   fif           Retrieve (do not set) values for filling in a form
\&   options       Select lists. Sorted array of hashes, keys: "value", "label"
.Ve
.SH "Forms"
.IX Header "Forms"
.SS "Attributes to pass to new or set in form"
.IX Subsection "Attributes to pass to new or set in form"
.Vb 7
\&   item_class    Class of db item
\&   item_id       Primary key of db item
\&   schema        Schema of item
\&   item          DB row object
\&   init_object   For default values instead of $item
\&   dependency    Array of arrays of field names. If one name has a value, all
\&                       fields in the list are set to \*(Aqrequired\*(Aq
.Ve
.SS "Other Form attributes"
.IX Subsection "Other Form attributes"
.Vb 11
\&   name           Form name
\&   validated      Flag that form has validated
\&   ran_validation Flag that validation has already been run
\&   field_name_space  Where to look for your fields
\&   num_errors     Number of errors
\&   language handle  For MakeText
\&   params         HTTP parameters
\&   fields         Field array
\&   parent         For compound/related fields: parent field reference
\&   html_prefix    Flag to prefix html field names with the form name
\&   ctx            Application context for your use
.Ve
.SS "Form methods"
.IX Subsection "Form methods"
.Vb 2
\&   has_field       Moose\-y sugar for declaring fields
\&   clear           Resets state. Used in persistent forms.
\&
\&   fields          The array of fields
\&   sorted_fields   The sorted array of fields
\&   field( $name )  Returns a field object
\&   value           Returns a hashref of values (with accessor keys)
\&   fif             Returns a hashref for filling in form
\&
\&   has_errors      True if any field has errors
\&   num_errors      The number of fields with errors
\&   error_fields    An array of fields with errors
\&   errors          Returns an array of all errors
\&   error_field_names Returns an array of field names with errors
\&
\&   uuid            Creates an HTML element \*(Aqform_uuid\*(Aq
\&
\&   process         Sets up form, validated, updates model
.Ve
.SS "Subroutines for your form"
.IX Subsection "Subroutines for your form"
.Vb 4
\&   options_$fieldname       Provides a list of key value pairs for select lists
\&   validate_$fieldname      Validation routine for field
\&   default_$fieldname       Default value for the field in an initial form
\&   validate                 For validation after individual fields are validated
.Ve
.SS "Methods from HTML::FormHandler::Model::DBIC for method modifiers"
.IX Subsection "Methods from HTML::FormHandler::Model::DBIC for method modifiers"
.Vb 2
\&   validate_model    Add additional database type validation
\&   update_model      To perform additional database actions update
.Ve
.SH "Useful in a template"
.IX Header "Useful in a template"
.Vb 5
\&   $form\->has_errors    [% IF form.has_errors %]
\&   $field\->has_errors   [% IF field.has_errors %]
\&   $form\->error_fields  [% FOREACH field IN form.error_fields %]
\&   $form\->error_field_names   [% FOREACH name IN form.error_field_names %]
\&   $form\->errors        Array of error messages for all fields
\&
\&   [% FOR field IN form.error_fields %]
\&     [% FOR error IN field.errors %]
\&       <p><span class=\*(Aqerror\*(Aq id=error>[% error %] </span></p>
\&     [% END %]
\&   [% END %]
\&
\&   sorted_fields     [% FOREACH field IN form.sorted_fields %]
\&   uuid              subroutine that returns a uuid
\&   $form\->fif        value="[% form.fif.title %]"
\&   $field\->fif       value="[% field.fif %]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
FormHandler Contributors \- see HTML::FormHandler
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Gerda Shank.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
