.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::BaseDir 3"
.TH File::BaseDir 3 "2010-10-02" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::BaseDir \- Use the Freedesktop.org base directory specification
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        use File::BaseDir qw/xdg_data_files/;
\&        for ( xdg_data_files(\*(Aqmime/globs\*(Aq) ) {
\&                # do something
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can be used to find directories and files as specified
by the Freedesktop.org Base Directory Specification. This specifications
gives a mechanism to locate directories for configuration, application data
and cache data. It is suggested that desktop applications for e.g. the 
Gnome, \s-1KDE\s0 or Xfce platforms follow this layout. However, the same layout can
just as well be used for non-GUI applications.
.PP
This module forked from File::MimeInfo.
.PP
This module follows version 0.6 of BaseDir specification.
.SH "EXPORT"
.IX Header "EXPORT"
None by default, but all methods can be exported on demand.
Also the groups \*(L":lookup\*(R" and \*(L":vars\*(R" are defined. The \*(L":vars\*(R" group
contains all routines with a \*(L"xdg_\*(R" prefix; the \*(L":lookup\*(R" group
contains the routines to locate files and directories.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new()""" 4
.el .IP "\f(CWnew()\fR" 4
.IX Item "new()"
Simple constructor to allow Object Oriented use of this module.
.SS "Lookup"
.IX Subsection "Lookup"
The following methods are used to lookup files and folders in one of the
search paths.
.ie n .IP """data_home(@PATH)""" 4
.el .IP "\f(CWdata_home(@PATH)\fR" 4
.IX Item "data_home(@PATH)"
Takes a list of file path elements and returns a new path by appending
them to the data home directory. The new path does not need to exist.
Use this when writing user specific application data.
.Sp
Example:
.Sp
.Vb 3
\&  # data_home is: /home/USER/.local/share
\&  $path = $bd\->data_home(\*(AqFoo\*(Aq, \*(AqBar\*(Aq, \*(AqBaz\*(Aq);
\&  # returns: /home/USER/.local/share/Foo/Bar/Baz
.Ve
.ie n .IP """data_dirs(@PATH)""" 4
.el .IP "\f(CWdata_dirs(@PATH)\fR" 4
.IX Item "data_dirs(@PATH)"
Looks for directories specified by \f(CW@PATH\fR in the data home and
other data directories. Returns (possibly empty) list of readable
directories. In scalar context only the first directory found is
returned. Use this to lookup application data.
.ie n .IP """data_files(@PATH)""" 4
.el .IP "\f(CWdata_files(@PATH)\fR" 4
.IX Item "data_files(@PATH)"
Looks for files specified by \f(CW@PATH\fR in the data home and other data
directories. Only returns files that are readable. In scalar context only
the first file found is returned. Use this to lookup application data.
.ie n .IP """config_home(@PATH)""" 4
.el .IP "\f(CWconfig_home(@PATH)\fR" 4
.IX Item "config_home(@PATH)"
Takes a list of path elements and appends them to the config home
directory returning a new path. The new path does not need to exist.
Use this when writing user specific configuration.
.ie n .IP """config_dirs(@PATH)""" 4
.el .IP "\f(CWconfig_dirs(@PATH)\fR" 4
.IX Item "config_dirs(@PATH)"
Looks for directories specified by \f(CW@PATH\fR in the config home and
other config directories. Returns (possibly empty) list of readable
directories. In scalar context only the first directory found is
returned. Use this to lookup configuration.
.ie n .IP """config_files(@PATH)""" 4
.el .IP "\f(CWconfig_files(@PATH)\fR" 4
.IX Item "config_files(@PATH)"
Looks for files specified by \f(CW@PATH\fR in the config home and other
config directories. Returns a (possibly empty) list of files that
are readable. In scalar context only the first file found is returned.
Use this to lookup configuration.
.ie n .IP """cache_home(@PATH)""" 4
.el .IP "\f(CWcache_home(@PATH)\fR" 4
.IX Item "cache_home(@PATH)"
Takes a list of path elements and appends them to the cache home
directory returning a new path. The new path does not need to exist.
.SS "Variables"
.IX Subsection "Variables"
The following methods only returns the value of one of the \s-1XDG\s0 variables.
.ie n .IP """xdg_data_home""" 4
.el .IP "\f(CWxdg_data_home\fR" 4
.IX Item "xdg_data_home"
Returns either \f(CW$ENV{XDG_DATA_HOME}\fR or it's default value.
Default is \fI\f(CI$HOME\fI/.local/share\fR.
.ie n .IP """xdg_data_dirs""" 4
.el .IP "\f(CWxdg_data_dirs\fR" 4
.IX Item "xdg_data_dirs"
Returns either \f(CW$ENV{XDG_DATA_DIRS}\fR or it's default value as list.
Default is \fI/usr/local/share\fR, \fI/usr/share\fR.
.ie n .IP """xdg_config_home""" 4
.el .IP "\f(CWxdg_config_home\fR" 4
.IX Item "xdg_config_home"
Returns either \f(CW$ENV{XDG_CONFIG_HOME}\fR or it's default value.
Default is \fI\f(CI$HOME\fI/.config\fR.
.ie n .IP """xdg_config_dirs""" 4
.el .IP "\f(CWxdg_config_dirs\fR" 4
.IX Item "xdg_config_dirs"
Returns either \f(CW$ENV{XDG_CONFIG_DIRS}\fR or it's default value as list.
Default is \fI/etc/xdg\fR.
.ie n .IP """xdg_cache_home""" 4
.el .IP "\f(CWxdg_cache_home\fR" 4
.IX Item "xdg_cache_home"
Returns either \f(CW$ENV{XDG_CACHE_HOME}\fR or it's default value.
Default is \fI\f(CI$HOME\fI/.cache\fR.
.SH "NON-UNIX PLATFORMS"
.IX Header "NON-UNIX PLATFORMS"
The use of File::Spec ensures that all paths are returned in the apropriate
form for the current platform. On Windows this module will try to set \f(CW$HOME\fR
to a sensible value if it is not defined yet. On other platforms one can use
e.g. File::HomeDir to set \f(CW$HOME\fR before loading File::BaseDir.
.PP
Please note that the specification is targeting Unix platforms only and
will only have limited relevance on other platforms. Any platform dependend
behavior in this module should be considerd an extension of the spec.
.SH "BACKWARDS COMPATIBILITY"
.IX Header "BACKWARDS COMPATIBILITY"
The methods \f(CW\*(C`xdg_data_files()\*(C'\fR and \f(CW\*(C`xdg_config_files()\*(C'\fR are exported for
backwards compatibilty with version 0.02. They are identical to \f(CW\*(C`data_files()\*(C'\fR
and \f(CW\*(C`config_files()\*(C'\fR respectively but without the \f(CW\*(C`wantarray\*(C'\fR behavior.
.SH "BUGS"
.IX Header "BUGS"
Please mail the author if you encounter any bugs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jaap Karssenberg || Pardus [Larus] <pardus@cpan.org>
.PP
Copyright (c) 2003, 2007 Jaap G Karssenberg. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://www.freedesktop.org/wiki/Specifications/basedir\-spec <http://www.freedesktop.org/wiki/Specifications/basedir-spec>
